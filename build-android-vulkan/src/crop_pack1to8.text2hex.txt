#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int bugihfa = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec8 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
int dims;
int w;
int h;
int c;
int cstep;

int outdims;
int outw;
int outh;
int outc;
int outcstep;

int woffset;
int hoffset;
int coffset;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
return;

int x = gx + p.woffset;
int y = gy + p.hoffset;
int z = gz * 8 + p.coffset;

#if NCNN_image_shader
afpvec8 v;
v[0].r = image3d_ld1(bottom_blob, ivec3(x, y, z + 0));
v[0].g = image3d_ld1(bottom_blob, ivec3(x, y, z + 1));
v[0].b = image3d_ld1(bottom_blob, ivec3(x, y, z + 2));
v[0].a = image3d_ld1(bottom_blob, ivec3(x, y, z + 3));
v[1].r = image3d_ld1(bottom_blob, ivec3(x, y, z + 4));
v[1].g = image3d_ld1(bottom_blob, ivec3(x, y, z + 5));
v[1].b = image3d_ld1(bottom_blob, ivec3(x, y, z + 6));
v[1].a = image3d_ld1(bottom_blob, ivec3(x, y, z + 7));

image3d_st8(top_blob, ivec3(gx, gy, gz), v);
#else
int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

ivec4 v_offset = z * psc(cstep) + y * psc(w) + x + ivec4(0, 1, 2, 3) * psc(cstep);
ivec4 vv_offset = v_offset + 4 * psc(cstep);

buffer_cp1to8(top_blob_data, gi, bottom_blob_data, v_offset, vv_offset);
#endif
}
